name: Build and Release Expo Android APK

# Specify permissions for the GITHUB_TOKEN
permissions:
  contents: write # Required for pushing tags and creating releases
  actions: read # Required for workflow execution
  checks: write # Optional, for updating check statuses

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      buildDebug:
        description: 'Build Debug APK (true/false)'
        required: false
        default: 'false'

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for tag and release history

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Step 3: Install project dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Install Expo CLI
      - name: Install Expo CLI
        run: npm install -g expo-cli

      # Step 5: Run expo prebuild to generate native Android project
      - name: Run expo prebuild
        run: npx expo prebuild --platform android

      # Step 6: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      # Step 7: Decode and save Keystore file
      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > android/app/keystore.jks

      # Step 8: Configure signing in build.gradle
      - name: Configure signing in build.gradle
        run: |
          # Append signing configuration to android/app/build.gradle
          cat << 'EOF' >> android/app/build.gradle
          android {
              signingConfigs {
                  release {
                      storeFile file("keystore.jks")
                      storePassword System.getenv("RELEASE_KEYSTORE_PASSWORD")
                      keyAlias System.getenv("RELEASE_KEY_ALIAS")
                      keyPassword System.getenv("RELEASE_KEY_PASSWORD")
                  }
              }
              buildTypes {
                  release {
                      signingConfig signingConfigs.release
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
          }
          EOF

      # Step 9: Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x ./android/gradlew

      # Step 10: Build Debug APK (conditional)
      - name: Build Debug APK
        if: github.event.inputs.buildDebug == 'true' || github.event_name == 'pull_request'
        run: cd android && ./gradlew assembleDebug

      # Step 11: Build Release APK
      - name: Build Release APK
        run: cd android && ./gradlew assembleRelease
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      # Step 12: Build AAB (optional)
      - name: Build AAB
        run: cd android && ./gradlew bundleRelease
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      # Step 13: Extract app name and version from app.json
      - name: Extract app name and version
        id: app-info
        run: |
          # Extract name and version from app.json
          APP_NAME=$(node -p "require('./app.json').expo.name" | sed 's/[^a-zA-Z0-9]/-/g')
          VERSION=$(node -p "require('./app.json').expo.version")
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      # Step 14: Rename build outputs
      - name: Rename build outputs
        run: |
          # Rename APK and AAB files
          mv android/app/build/outputs/apk/release/app-release.apk android/app/build/outputs/apk/release/${{ steps.app-info.outputs.APP_NAME }}-${{ steps.app-info.outputs.VERSION }}.apk
          mv android/app/build/outputs/bundle/release/app-release.aab android/app/build/outputs/bundle/release/${{ steps.app-info.outputs.APP_NAME }}-${{ steps.app-info.outputs.VERSION }}.aab

      # Step 15: Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-build-artifacts
          path: |
            android/app/build/outputs/apk/**/*.apk
            android/app/build/outputs/bundle/**/*.aab

      # Step 16: Check app.json version
      - name: Check app.json version
        id: check-version
        run: |
          # Extract version from app.json
          CURRENT_VERSION=$(node -p "require('./app.json').expo.version")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Get the latest release tag (if any)
          LATEST_TAG=$(git tag --sort=-v:refname | grep '^v' | head -n 1 || echo "")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT

          # Extract version from latest tag (e.g., v1.0.0-123 -> 1.0.0)
          if [ -n "$LATEST_TAG" ]; then
            LATEST_VERSION=$(echo "$LATEST_TAG" | sed 's/^v\([^0-9]*\)\(.*\)/\1/')
            echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT
          else
            LATEST_VERSION=""
            echo "LATEST_VERSION=" >> $GITHUB_OUTPUT
          fi

          # Compare versions
          if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
            echo "Version $CURRENT_VERSION has not changed. Skipping release creation."
            echo "SKIP_RELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "Version changed or no prior release. Proceeding with release creation."
            echo "SKIP_RELEASE=false" >> $GITHUB_OUTPUT
          fi

      # Step 17: Create Git tag
      - name: Create Git tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.check-version.outputs.SKIP_RELEASE == 'false'
        run: |
          TAG="v${{ steps.check-version.outputs.CURRENT_VERSION }}-${{ github.run_number }}"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag $TAG
          git push origin $TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 18: Generate commit list
      - name: Generate commit list
        id: get-commits
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.check-version.outputs.SKIP_RELEASE == 'false'
        run: |
          # Get commits between the latest tag and HEAD
          if [ -n "${{ steps.check-version.outputs.LATEST_TAG }}" ]; then
            COMMIT_LIST=$(git log ${{ steps.check-version.outputs.LATEST_TAG }}..HEAD --pretty=format:"%h %s" --no-merges | sed 's/^/- /')
          else
            COMMIT_LIST=$(git log --pretty=format:"%h %s" --no-merges | sed 's/^/- /')
          fi
          # Escape newlines for GitHub Actions output
          COMMIT_LIST=$(echo "$COMMIT_LIST" | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "commit_list=$COMMIT_LIST" >> $GITHUB_OUTPUT

      # Step 19: Create GitHub Release
      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.check-version.outputs.SKIP_RELEASE == 'false'
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.check-version.outputs.CURRENT_VERSION }}-${{ github.run_number }}
          release_name: Release v${{ steps.check-version.outputs.CURRENT_VERSION }}-${{ github.run_number }}
          body: |
            Automated release for version ${{ steps.check-version.outputs.CURRENT_VERSION }}.
            - Built Android APK and AAB.

            ### Changes since last release
            ${{ steps.check-version.outputs.LATEST_TAG }}..HEAD:
            ${{ steps.get-commits.outputs.commit_list }}
          draft: false
          prerelease: false

      # Step 20: Upload Release APK
      - name: Upload Release APK
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.check-version.outputs.SKIP_RELEASE == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: android/app/build/outputs/apk/release/${{ steps.app-info.outputs.APP_NAME }}-${{ steps.app-info.outputs.VERSION }}.apk
          asset_name: ${{ steps.app-info.outputs.APP_NAME }}-${{ steps.app-info.outputs.VERSION }}.apk
          asset_content_type: application/vnd.android.package-archive

      # Step 21: Upload Release AAB
      - name: Upload Release AAB
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.check-version.outputs.SKIP_RELEASE == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: android/app/build/outputs/bundle/release/${{ steps.app-info.outputs.APP_NAME }}-${{ steps.app-info.outputs.VERSION }}.aab
          asset_name: ${{ steps.app-info.outputs.APP_NAME }}-${{ steps.app-info.outputs.VERSION }}.aab
          asset_content_type: application/x-android-app-bundle